Multi-Environment CI/CD Deployment Strategies

1. Branch-based deployments:
```yaml
name: Backend CI/CD

on:
  push:
    branches: 
      - main
      - qa
      - prod
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      # ... test steps ...

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      # ... other steps ...

      - name: Set environment based on branch
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
            echo "ENVIRONMENT=qa" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          fi

      - name: Deploy infrastructure
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="project_name=favorite-color" \
            -var="aws_account_id=${{ vars.AWS_ACCOUNT_ID_${{ env.ENVIRONMENT }} }}"
```

2. Manual workflow dispatch with environment selection:
```yaml
name: Backend CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      # ... other steps ...
      - name: Deploy infrastructure
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve \
            -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
            -var="project_name=favorite-color" \
            -var="aws_account_id=${{ vars.AWS_ACCOUNT_ID_${{ github.event.inputs.environment || 'dev' }} }}"
```

3. Environment protection rules with manual approval:
```yaml
name: Backend CI/CD

on:
  push:
    branches: [ main ]

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      # ... deployment steps for dev ...

  deploy-qa:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: qa
    steps:
      # ... deployment steps for qa ...

  deploy-prod:
    needs: deploy-qa
    runs-on: ubuntu-latest
    environment: prod
    steps:
      # ... deployment steps for prod ...
```

Benefits of each approach:

1. Branch-based:
   - Simple to understand
   - Automatic deployments based on branch
   - Good for teams that use branch-based workflows

2. Manual workflow dispatch:
   - More control over deployments
   - Can be triggered manually with environment selection
   - Good for teams that want explicit control

3. Environment protection rules:
   - Most controlled approach
   - Can require approvals for each environment
   - Good for teams that need strict deployment controls

Note: These approaches can be combined (e.g., branch-based for dev, manual approval for prod). 