openapi: 3.0.0
info:
  title: Color API
  description: API for managing user's colors
  version: 1.0.0

servers:
  - url: https://{api-id}.execute-api.{region}.amazonaws.com/{stage}
    variables:
      api-id:
        description: API Gateway ID
        default: default
      region:
        default: us-east-1
        description: AWS region
      stage:
        default: dev
        enum:
          - dev
          - prod
        description: API deployment stage

components:
  schemas:
    ColorSubmission:
      type: object
      required:
        - firstName
        - color
      properties:
        firstName:
          type: string
          description: User's first name (used as primary key)
        color:
          type: string
          description: User's color

    ColorRecord:
      type: object
      required:
        - pk
        - colors
        - timestamp
      properties:
        pk:
          type: string
          description: Primary key (firstName)
        colors:
          type: array
          items:
            type: string
          description: Array of colors submitted by the user
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the submission

    ApiResponse:
      type: object
      required:
        - statusCode
      properties:
        statusCode:
          type: integer
          description: HTTP status code
        data:
          description: Response data payload
        message:
          type: string
          description: Optional message (primarily for errors)

    ColorRecordResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ColorRecord'

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          required:
            - message
          properties:
            data:
              type: null

  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  /colors:
    get:
      summary: Search colors by first name
      operationId: getColors
      parameters:
        - in: query
          name: firstName
          required: true
          schema:
            type: string
          description: First name to search for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorRecordResponse'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      x-amazon-apigateway-integration:
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

    post:
      summary: Submit a new color
      operationId: postColors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColorSubmission'
      responses:
        '201':
          description: Color successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorRecordResponse'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      x-amazon-apigateway-integration:
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

    options:
      summary: CORS preflight request
      operationId: optionsColors
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string 
      x-amazon-apigateway-integration:
        uri: ${lambda_invoke_arn}
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

x-amazon-apigateway-binary-media-types:
  - '*/*'

x-amazon-apigateway-request-validators:
  full:
    validateRequestBody: true
    validateRequestParameters: true

x-amazon-apigateway-cors:
  allowOrigins:
    - '*'
  allowMethods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowHeaders:
    - Content-Type
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
  maxAge: 3600