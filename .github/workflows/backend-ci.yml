name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev
  TERRAFORM_STATE_BUCKET: color-service-terraform-state

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm test

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Set AWS Account ID based on environment
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID_DEV }}" >> $GITHUB_ENV
          elif [ "${{ env.ENVIRONMENT }}" = "test" ]; then
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID_TEST }}" >> $GITHUB_ENV
          else
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID_PROD }}" >> $GITHUB_ENV
          fi

      - name: Deploy Bootstrap Infrastructure
        run: |
          cd terraform/bootstrap
          terraform init -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
                        -backend-config="key=color-service/bootstrap/terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}"
          terraform apply -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="project_name=color"

      - name: Deploy Networking Infrastructure
        run: |
          cd terraform/networking
          terraform init -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
                        -backend-config="key=color-service/networking/terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}"
          terraform apply -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="project_name=color" \
            -var="aws_region=${{ env.AWS_REGION }}"

      - name: Deploy Application Infrastructure
        run: |
          cd terraform/application
          terraform init -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
                        -backend-config="key=color-service/application/terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}"
          terraform apply -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="project_name=color" \
            -var="aws_region=${{ env.AWS_REGION }}"

      - name: Deploy CICD Infrastructure
        run: |
          cd terraform/cicd
          terraform init -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
                        -backend-config="key=color-service/cicd/terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}"
          terraform apply -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="project_name=color" \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="terraform_state_bucket=${{ env.TERRAFORM_STATE_BUCKET }}" 